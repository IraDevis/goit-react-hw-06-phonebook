{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","hooks/useLocalStorage.js","App.js","index.js","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","e","target","value","preventDefault","className","styles","formLabel","formInput","type","pattern","title","required","onChange","Filter","label","input","ContactList","contacts","onDelete","map","id","onClick","useLocalStorage","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","App","setContacts","filter","setFilter","data","contact","toLowerCase","find","alert","newContact","shortid","generate","currentTarget","includes","newContacts","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.06b325c7.chunk.js","sourcesContent":["// import { Component } from \"react\";\nimport { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport styles from \"./ContactForm.module.css\";\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handleChange = (e) => {\n    switch (e.target.name) {\n      case \"name\":\n        setName(e.target.value);\n        break;\n\n      case \"number\":\n        setNumber(e.target.value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label className={styles.formLabel}>\n          Name\n          <input\n            className={styles.formInput}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={handleChange}\n            value={name}\n          />\n        </label>\n        <label className={styles.formLabel}>\n          Number\n          <input\n            className={styles.formInput}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={handleChange}\n            value={number}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\n// class ContactForm extends Component {\n//   static propTypes = {\n//     onSubmit: PropTypes.func.isRequired,\n//   };\n\n//   state = {\n//     name: \"\",\n//     number: \"\",\n//   };\n\n// handleChange = (e) => {\n//   const { name, value } = e.currentTarget;\n//   this.setState({ [name]: value });\n// };\n\n// handleSubmit = (e) => {\n//   e.preventDefault();\n//   this.props.onSubmit(this.state);\n//   this.setState({ name: \"\", number: \"\" });\n// };\n\n//   render() {\n// return (\n//   <>\n//     <form onSubmit={this.handleSubmit}>\n//       <label className={styles.formLabel}>\n//         Name\n//         <input\n//           className={styles.formInput}\n//           type=\"text\"\n//           name=\"name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//           required\n//           onChange={this.handleChange}\n//           value={this.state.name}\n//         />\n//       </label>\n//       <label className={styles.formLabel}>\n//         Number\n//         <input\n//           className={styles.formInput}\n//           type=\"tel\"\n//           name=\"number\"\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//           required\n//           onChange={this.handleChange}\n//           value={this.state.number}\n//         />\n//       </label>\n//       <button type=\"submit\">Add contact</button>\n//     </form>\n//   </>\n// );\n//   }\n// }\n\n// export default ContactForm;\n","// import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport styles from \"./Filter.module.css\";\n\nexport default function Filter({ value, onChange }) {\n  return (\n    <>\n      <label className={styles.label}>\n        Find by name\n        <input\n          className={styles.input}\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n        ></input>\n      </label>\n    </>\n  );\n}\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n};\n\n// class Filter extends Component {\n// static propTypes = {\n//   onChange: PropTypes.func.isRequired,\n//   value: PropTypes.string,\n// };\n\n//   render() {\n// return (\n//   <>\n//     <label className={styles.label}>\n//       Find by name\n//       <input\n//         className={styles.input}\n//         type=\"text\"\n//         value={this.props.value}\n//         onChange={this.props.onChange}\n//       ></input>\n//     </label>\n//   </>\n// );\n//   }\n// }\n\n// export default Filter;\n","const ContactList = ({ contacts, onDelete }) => {\n  return (\n    <>\n      <ul>\n        {contacts.map(({ id, name, number }) => (\n          <li key={id}>\n            <p>\n              {name}: {number}\n            </p>\n            <button type=\"button\" onClick={() => onDelete(id)}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n","import { useState, useEffect } from \"react\";\n\nexport default function useLocalStorage(key, defaultValue) {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n","// import { Component } from \"react\";\nimport shortid from \"shortid\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactList from \"./components/ContactList\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\n\nimport \"modern-normalize\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", []);\n  const [filter, setFilter] = useLocalStorage(\"filter\", \"\");\n\n  const addContact = (data) => {\n    const allContacts = contacts.map((contact) => contact.name.toLowerCase());\n\n    if (allContacts.find((contact) => contact === data.name.toLowerCase())) {\n      return alert(\"This name has already used, enter another name, please!\");\n    }\n\n    setContacts((contacts) => {\n      const newContact = {\n        id: shortid.generate(),\n        name: data.name,\n        number: data.number,\n      };\n      return [...contacts, newContact];\n    });\n  };\n\n  const handleFilter = (e) => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const getContactsList = () => {\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const deleteContact = (id) => {\n    const newContacts = contacts.filter((contact) => contact.id !== id);\n    setContacts(newContacts);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={addContact} />\n      <h2>Contacts</h2>\n      <Filter onChange={handleFilter} value={filter} />\n      <ContactList contacts={getContactsList()} onDelete={deleteContact} />\n    </div>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts: [\n//       { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n//       { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n//       { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n//       { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n//     ],\n//     filter: \"\",\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem(\"contacts\");\n//     const parsedContacts = JSON.parse(contacts);\n\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n// addContact = (data) => {\n//   const { contacts } = this.state;\n//   const allContacts = contacts.map((contact) => contact.name.toLowerCase());\n\n//   if (allContacts.find((contact) => contact === data.name.toLowerCase())) {\n//     return alert(\"This name has already used, enter another name, please!\");\n//   }\n\n//   this.setState(({ contacts }) => {\n//     const newContact = {\n//       id: shortid.generate(),\n//       name: data.name,\n//       number: data.number,\n//     };\n//     return { contacts: [...contacts, newContact] };\n//   });\n// };\n\n// handleFilter = (e) => {\n//   this.setState({ filter: e.currentTarget.value });\n// };\n\n// getContactsList = () => {\n//   return this.state.contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(this.state.filter.toLowerCase())\n//   );\n// };\n\n// deleteContact = (id) => {\n//   this.setState((prevState) => ({\n//     contacts: prevState.contacts.filter((contact) => contact.id !== id),\n//   }));\n// };\n\n//   render() {\n// return (\n//   <div className=\"container\">\n//     <h1>Phonebook</h1>\n//     <ContactForm onSubmit={this.addContact} />\n//     <h2>Contacts</h2>\n//     <Filter onChange={this.handleFilter} value={this.state.filter} />\n//     <ContactList\n//       contacts={this.getContactsList()}\n//       onDelete={this.deleteContact}\n//     />\n//   </div>\n// );\n//   }\n// }\n\n// export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formLabel\":\"ContactForm_formLabel__22hJk\",\"formInput\":\"ContactForm_formInput__f_h50\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1_UUl\",\"input\":\"Filter_input__GB2W7\"};"],"sourceRoot":""}
{"version":3,"sources":["components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducers.js","redux/filter/filter-actions.js","redux/filter/filter-reducers.js","redux/store.js","redux/contacts/contacts-selector.js","components/ContactForm/ContactForm.js","redux/filter/filter-selector.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","contact","payload","id","name","number","deleteContact","contactsReducer","createReducer","state","filter","getFilter","filterReducer","_","action","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","rootReducer","combineReducers","contacts","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","getContacts","getContactsList","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","e","target","value","onSubmit","preventDefault","map","find","alert","newContact","shortid","generate","className","styles","formLabel","formInput","type","pattern","title","required","onChange","filtered","Filter","label","input","ContactList","onClick","connect","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.f7c91bdb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1_UUl\",\"input\":\"Filter_input__GB2W7\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const addContact = createAction('contacts/add', contact => ({\r\n    payload: {\r\n        id: contact.id,\r\n        name: contact.name,\r\n        number: contact.number,\r\n    },\r\n}));\r\n\r\nexport const deleteContact = createAction('contacts/delete');","import { createReducer } from '@reduxjs/toolkit';\r\nimport { addContact, deleteContact } from './contacts-actions';\r\n\r\nconst contactsReducer = createReducer([], {\r\n    [addContact]: (state, { payload }) => [...state, payload],\r\n    [deleteContact]: (state, { payload }) => state.filter((contact) => contact.id !== payload)\r\n})\r\n\r\nexport default contactsReducer;","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const getFilter = createAction('filter/get');","import { createReducer } from '@reduxjs/toolkit';\r\nimport { getFilter } from './filter-actions';\r\n\r\nconst filterReducer = createReducer('', {\r\n    [getFilter]: (_, action) => action.payload\r\n});\r\n\r\nexport default filterReducer;","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n    persistStore, persistReducer, FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts/contacts-reducers';\r\nimport filterReducer from './filter/filter-reducers';\r\n\r\nconst persistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n    }\r\n}), logger];\r\n\r\nconst rootReducer = combineReducers({\r\n    contacts: contactsReducer,\r\n    filter: filterReducer,\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };","export const getContacts = state => state.contacts\r\n\r\nexport default function getContactsList(state) {\r\n    return getContacts(state).filter((contact) =>\r\n        contact.name.toLowerCase().includes(state.filter.toLowerCase())\r\n    );\r\n};","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addContact } from \"../../redux/contacts/contacts-actions\";\nimport { getContacts } from \"../../redux/contacts/contacts-selector\";\nimport shortid from 'shortid';\n\nimport styles from \"./ContactForm.module.css\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = (e) => {\n    switch (e.target.name) {\n      case \"name\":\n        setName(e.target.value);\n        break;\n\n      case \"number\":\n        setNumber(e.target.value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const allContacts = contacts.map((contact) => contact.name.toLowerCase());\n\n    if (allContacts.find((contact) => contact === name.toLowerCase())) {\n      return alert(\"This name has already used, enter another name, please!\");\n    }\n\n    const newContact = {\n      id: shortid.generate(),\n      name: name,\n      number: number,\n    };\n\n    dispatch(addContact(newContact));\n\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label className={styles.formLabel}>\n          Name\n          <input\n            className={styles.formInput}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={handleChange}\n            value={name}\n          />\n        </label>\n        <label className={styles.formLabel}>\n          Number\n          <input\n            className={styles.formInput}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={handleChange}\n            value={number}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </>\n  );\n}","export const filtered = (state) => state.filter;","import { useDispatch, useSelector } from \"react-redux\";\nimport { getFilter } from \"../../redux/filter/filter-actions\";\nimport { filtered } from \"../../redux/filter/filter-selector\";\n\nimport styles from \"./Filter.module.css\";\n\nexport default function Filter() {\n  const value = useSelector(filtered);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <label className={styles.label}>\n        Find by name\n        <input\n          className={styles.input}\n          type=\"text\"\n          value={value}\n          onChange={(e) => dispatch(getFilter(e.target.value))}\n        ></input>\n      </label>\n    </>\n  );\n}","import { useSelector, useDispatch } from \"react-redux\";\nimport getContactsList from \"../../redux/contacts/contacts-selector\";\nimport { deleteContact } from \"../../redux/contacts/contacts-actions\";\n\nexport default function ContactList() {\n  const contacts = useSelector(getContactsList);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <ul>\n        {contacts.map(({ id, name, number }) => (\n          <li key={id}>\n            <p>\n              {name}: {number}\n            </p>\n            <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};","import { connect } from \"react-redux\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactList from \"./components/ContactList\";\n\nimport \"modern-normalize\";\nimport \"./styles.css\";\n\nfunction App() {\n\n  return (\n    <div className=\"container\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default connect(null)(App);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formLabel\":\"ContactForm_formLabel__22hJk\",\"formInput\":\"ContactForm_formInput__f_h50\"};"],"sourceRoot":""}